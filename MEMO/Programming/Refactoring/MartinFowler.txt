
2021-01-29 07:48:07
リファクタリングの本を読みながら、
サンプルコードを写経します。

2021-01-29 08:33:24
```
コンパイラはコードが汚いものであろうが、きれいに書かれていようが一向に気にしません。しかし変更となると、そこには人間が関わる必要が出てきます。

人間はまず間違いなく、コードのきれいさを気にします。設計のまずいシステムは変更が難しくなります。

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.4). Kindle 版. 
```

継続的に変更を試みる状況下を想定するならリファクタリングは重要な要素だと思いました。

2021-01-29 08:54:41
```
リファクタリングを行うとき、最初にすることは常に同じです。
対象となるコードについてきちんとしたテスト群を作り上げることです。

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.5). Kindle 版. 
```

2021-01-29 09:26:48
```
この変更はパフォーマンスに大きな影響を与えないし、たとえそうであってもコードが整然としていれば後からチューニングが容易にできるということです。 

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.14). Kindle 版. 
```

2021-01-29 09:38:01
```
一時変数は問題のもとです。
ルーチン内でのみ有効なため、長く複雑なルーチンができてしまいがちです。 
そこで次のリファクタリングとして、一時変数をいくつか置き換えます。

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.16). Kindle 版. 
```

2021-01-29 12:15:19
コミットメッセージにやっていたことの大まかな説明が付けれていたらよかったなと思いました。

この章ででた固有のフレーズについて英語ではなんと表現するのか後で調べてみたいです。

2021-01-29 12:23:58
```
リファクタリングによって、パフォーマンスに重大な影響を及ぼしてしまうこともときにはあります。 たとえそうなったとしても、 私はかまわず作業を継続します。なぜならよく整理されたコードのほうが、後からパフォーマンスの最適化がしやすいからです。

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.20). Kindle 版. 
```

2021-01-29 12:53:55
いったん読み進めるのを止めて各用語の英語を調べてみます。

- 関数の抽出
- 変数のインライン化
- 関数宣言の変更
- ループの分離
- ステートメントのスライド
- 問い合わせによる一時変数の置き換え

2021-01-30 11:31:10
- 関数の抽出
    Extract Method(Function)

- 変数のインライン化
    Inline Temp

- 関数宣言の変更
    Rename Method

- ループの分離
    Split Loop

- ステートメントのスライド
    Slide Statements

- 問い合わせによる一時変数の置き換え
    Replace Parameter with Query

Refactoring Techniques https://refactoring.guru/refactoring/techniques

Refactoring https://refactoring.com/

2021-01-30 14:52:12
Refactoring2の勉強を再開します

2021-01-30 14:53:26
```
込み入っている箇所を小さな単位に分割していくことは、名前付けと同じくらい重要なのです。

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.24). Kindle 版. 
```

2021-01-30 15:01:10
- フェーズの分離
    Split Phase

2021-01-30 16:27:28
```
コード量は増えましたが、ロジックは認識しやすい形で、請求の計算処理部分と請求書のフォーマット作成部分とに分離されています。こうしたモジュール化により、コードの各部分の処理と、それらがどのように連携しているかを把握しやすくなります。

ＭａｒｔｉｎＦｏｗｌｅｒ. リファクタリング 既存のコードを安全に改善する（第2版） (p.33). Kindle 版. 
```

2021-02-01 14:54:24
Refactoring2 MFの続きをします。
Go言語に挑戦することにしたので、Refactoring2は区切りのいいところで中断します。

2021-02-01 17:00:10
- ポリモーフィズムによる条件記述の置き換え
- 関数の移動
- サブクラスによるタイプコードの置き換え
- ファクトリ関数によるコンストラクタの置き換え

2021-02-01 18:18:18
- ポリモーフィズムによる条件記述の置き換え
    Replace Conditional with Polymorphism

- 関数の移動
    Move Function

- サブクラスによるタイプコードの置き換え
    Replace Type Code with Subclasses

- ファクトリ関数によるコンストラクタの置き換え
    Replace Constructor with Factory Function
