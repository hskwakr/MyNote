
2021-01-31 14:57:45
Piece tableとは別の実装のテキストエディタを教えていただきました。

参考情報：C++のテキストエディタ
https://github.com/vivisuke/openViVi

2021-01-31 15:08:57
Piece tableの評価についての考察がのった記事を教えていただきました。

テキストエディタ用バッファの各種データ構造とその評価 (2) http://s170199.ppp.asahi-net.or.jp/vivi/docs/buffer/edit_buffer2.php

```
array（固定長配列）はシーケンスデータを取り扱うのに最も自然なデータ構造だが、 サイズ固定であるためにバッファに用いるには難がある。
しかし、vector<array<char>> のように、可変個の array を vector で管理してやれば、 固定長というデメリットが致命的なものではなくなる。
ただし、管理コストが新たに発生するので、管理・被管理データ構造を慎重に選ぶ必要がある。 
```

Collectionで文字のシーケンスを管理する方法だとランダムアクセスはO(1)\
挿入削除はO(N)
バッファが大きくなるほど重くなる。

```
C++ にはいくつかのコンテナクラスがあって
list だと逆に 挿入・削除は O(1) で
ランダムアクセスが O(N) になるよ

list：双方向リンクリストね
ちなみに map は（ある程度バランスした）2分木で
挿入・削除・ランダムアクセスが 全部 O(log N) だよ

ちなみに C++ の map は 赤黒木 というデータ構造だよ
C++ では それらを コンテナクラスって呼ぶよ
```
C++はコンテナクラスが何個かあるようです
list: 双方向リンクリスト 

2021-01-31 15:33:50
```
vector<shared_ptr<array<char>>>
```

vectorでshared_ptr<array<char>>の集まりを管理する方法っぽいです。
shared pointerは何かわかりませんが
文字列のシーケンスを複数の塊に分割して管理しているのかも

```
シェアードポインタは スマートポインタの一種でアロケートしたメモリを自動で開放してくれるんじゃ
C++ にはガベージコレクションが無いので
その代わりみたいなものじゃ
ただし 大きな欠点としては 循環参照には対応してない
循環参照があると メモリリークしてしまう

メモリを共有する場合は シェアードポインタを使う
```

```
循環参照とは、数式において、いくつかの変数が互いの数値を参照しようとすることによってエラーとなる状態のことである。
```
循環参照とは何？ Weblio辞書 https://www.weblio.jp/content/%E5%BE%AA%E7%92%B0%E5%8F%82%E7%85%A7

```
C++ のスマートポインタは 循環参照に対応してない
スマートポインタには いくつかの種類がある
```

2021-01-31 15:42:37
```
ちなみに gap_vector というのは 中間に隙間があるvector で
最初期の Emacs で採用されたデータ構造だよ
ランダムアクセスも編集も O(1) になる、スグレモノじゃ

ただし O(1) になるのは 編集箇所が局所化されている場合のみで
末尾を編集したあとに 先頭に1文字挿入すると O(N) になる
```

2021-01-31 15:44:41
```
gap_vector は非常に面白いので
勉強するのをお勧めするよ
ちなみに おいらのエディタは gap_vector を使ってる

ギャップバッファ
```

ギャップバッファについて調べてみると面白いかもしれません。
```
線形とは直線って意味
```

2021-01-31 15:56:38
```
ピースを vector, list 類で管理する場合、ランダムアクセスは O(P) （P はピース数） 
ピースを BST で管理すれば、ランダムアクセスは O(logP) 
小さいピースが大量にある場合、メモリ効率が悪化する。また、シーケンシャルアクセス速度が低下する
```

2021-01-31 16:03:18
```
シーケンシャルアクセス時間（バッファ構築直後＆7文字に1文字置換処理後） 
```

```
シーケンシャルアクセスとは、複数のデータや記憶領域にアクセスする際に、それらが並んだ順番に連続して読み込みや書き込みを行うこと。
```
シーケンシャルアクセス（リニアアクセス）とは - IT用語辞典 e-Words https://e-words.jp/w/%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9.html

ファイルの各所を置換処理したあとのシーケンシャルアクセスが遅くなるらしいです

僕のコードだとToStringの部分が、遅くなるのかも


```
gap_vector<char> は編集を行っても、1文字あたりのシーケンシャルアクセス速度が変化することはないが、 piece table の場合は、ピースに含まれる文字数が減り、ピース個数が増えるので、イテレータの処理が重くなる。 
```

```
編集処理は、gap_vector<char> 並に高速である。編集箇所が非局所的であってもおｋ。
小ピースが大量にできない限り、メモリ効率はよい。
大量の小ピースがメモリを消費する問題は、undo のための情報を保持する場合にも同様であり、 致命的な問題ではないと考える。 
```

2021-01-31 16:09:18
一番の収穫は「ギャップバッファ」というものの存在をしれたことでした。

Piece tableに欠点があることがわかりました。でもPiece tableの構造を知った時に「これなら自分でもつくれそう」と思ったのがきっかけなので、Piece table自体の完成までは持っていきたいと思います。

ギャップバッファについても興味がわいたので、後で調べてみます。
