
2021-05-18 19:03:15
```
 Go programs express error state with error values.

The error type is a built-in interface similar to fmt.Stringer:

type error interface {
    Error() string
}
```
Goではエラーの状態をerrorというインターフェースを実装して表現するみたいです。

```
Functions often return an error value, and calling code should handle errors by testing whether the error equals nil. 
```
関数はよくerrorという値を返すそうです。
関数を呼び出しているコードではerror がnilかどうかを処理するべきだそうです。

2021-05-18 20:00:30
```
Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why? 
```
fmt.Sprint(e)だと再帰的にErrorメソッドが呼ばれてしまいますが、fmt.Sprint(float64(e))だとループを避けることができます。
どうしてでしょうか？

僕の推測だと、Sprint(e)はErrorメソッドを呼び出すけどfloat64(e)はErrorメソッドを呼び出さないからだと思います。

でもどうしてErrorメソッドを呼び出すんでしょうか調べてみます。

2021-05-18 20:19:45
それっぽい説明がありました。

go - Why would a call to fmt.Sprint(e) inside the Error() method result in an infinite loop? - Stack Overflow https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit

Sprint メソッドを実行するときに引数の型がerrorインターフェースを実装していたときにErrorメソッドが実行されてしまうからだそうです。

2021-07-02 15:34:11
Goエラーハンドリング戦略 https://zenn.dev/nobonobo/articles/0b722c9c2b18d5

2021-07-02 16:12:29
```
新しいテストスイートを作成するには，ここで説明するように TestXxx 関数を含む _test.go で終わる名前のファイルを作成します。 
```
testing - Go 言語 https://xn--go-hh0g6u.com/pkg/testing/

今までfunc TestXxxのXxxは関数名じゃないといけないと勘違いしてましたが、なんでもよさそうです。

2021-07-02 16:17:14
心配だったので各テストスイートがちゃんと走ってるか確認する方法をしらべました

```
go test ./sieve -v
```
