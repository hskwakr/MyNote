2021-03-28 02:49:45
A tour of Goの続きからやります。

2021-03-28 03:24:43
スライスを削ったり拡張しても元々入っていた値は消えたりしてないようです。

スライスはある配列がもとになっているのである配列の方に値が残っていたらスライスを拡張したときに見えるようになるみたいです。

```
func tour20() {
	s := []int{2, 3, 5, 7, 11, 13}
	fmt.Println(s)

	// Slice the slice to give it zero length
	s = s[:0]
	fmt.Println(s) // []

	// Extend its length
	s = s[:4]
	fmt.Println(s) // 2, 3, 5, 7

	// Drop its first two values
	s = s[2:]
	fmt.Println(s) // 5, 7
}
```

2021-03-28 03:27:37
ある配列: [1, 3, 5]
の長さを増やしたらどうなるんでしょうか
試してみます

```
panic: runtime error: slice bounds out of range [:5] with capacity 3
```

エラーが起きました。

2021-03-28 03:47:53
```
	// Drop its first two values
	s = s[2:]
	printSlice(s)
	// len=2 cap=4 [5, 7]
```

s[2:]をするとcapacityが変わるみたいです

2021-03-28 04:23:07
複数の値をappendで追加したときに
capacityがひとつ多くなってました
何故かはわかりません。
```
	// The slice grows as needed
	s = append(s, 1)
	printSlice(s)
	// len=2 cap=2 [0, 1]

	// We can add more than one element at a time
	s = append(s, 2, 3, 4)
	printSlice(s)
	// len=5 cap=6 [0, 1, 2, 3, 4]
```

2021-05-16 18:08:29
A tour of goの続きをします。

Methods and interfaces https://tour.golang.org/methods

2021-05-16 18:09:22
```
A method is a function with a special receiver argument. 
```
methodは特別なレシーバ引数を持つfunctionらしいです

```
The receiver appears in its own argument list between the func keyword and the method name. 
```
funcキーワードとメソッドの名前の間にレシーバーとして引数リストを追加できる

2021-05-16 18:22:56
```
You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as int). 
```
同じパッケージ内で定義されている型のみレシーバとして使えるようです。

2021-05-17 17:22:03
シグネチャとは

シグネチャとは - IT用語辞典 e-Words https://e-words.jp/w/%E3%82%B7%E3%82%B0%E3%83%8D%E3%83%81%E3%83%A3.html
```
プログラミングの分野では、関数やメソッドの名前、引数の数やデータ型、返り値の型などの組み合わせのことをシグネチャという。
```

2021-05-17 17:22:35
```
An interface type is defined as a set of method signatures.
```
interfaceタイプはメソッド宣言の集まりとして定義されるみたいです。

```
A value of interface type can hold any value that implements those methods. 
```
よくわかりませんでした

```
A type implements an interface by implementing its methods. There is no explicit declaration of intent, no "implements" keyword. 
```
タイプは、そのメソッドを実装することによってインターフェイスを実装します。
明示的なimplementsキーワードはありません。

2021-05-17 17:54:40
```
 Under the hood, interface values can be thought of as a tuple of a value and a concrete type:

(value, type)
```
interfaceの値は”値と型”のタプルとして考えることができます。

2021-05-18 05:05:27
```
 The interface type that specifies zero methods is known as the empty interface:

interface{}
```
メソッドのないインターフェースを宣言することができるらしいです。
そしてそれをempty interfaceと呼ぶそうです。

2021-05-18 05:06:45
```
 A type assertion provides access to an interface value's underlying concrete value.

t := i.(T)
```
type assertionという機能があるっぽいです。

```
 This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to the variable t.

If i does not hold a T, the statement will trigger a panic. 
```
上の構文は変数tにT型のインターフェースiの値を割り当てることを意味しているようです。

iがT型の値を持っていないときはpanicが発生するそうです。

2021-05-18 18:08:33
```
A type switch is a construct that permits several type assertions in series. 
```
type switchというものがあるみたいです。
switch文の中でempty interfaceの値によって複数の型の条件分岐ができるみたいです。

```
switch v := i.(type) {
case T:
    // here v has type T
case S:
    // here v has type S
default:
    // no match; here v has the same type as i
}
```

```
The declaration in a type switch has the same syntax as a type assertion i.(T), but the specific type T is replaced with the keyword type. 
```

type switchの宣言にはtype assertionのときのi.(T)と似た構文ですが、type switchのときは具体的な型Tがtypeキーワードに置き換えられるみたいです。

```
 In the default case (where there is no match), the variable v is of the same interface type and value as i. 
```
defaultのケースだとvはiの値と型になるっぽいです

2021-05-18 18:47:26
```
A Stringer is a type that can describe itself as a string. The fmt package (and many others) look for this interface to print values. 
```
fmtパッケージは値を出力するときにStringerインターフェースを探すみたいです。

Stringerインターフェースを実装するとPrintメソッドに変数を渡したときの挙動が変わりました。
```
> go run .
Arthur (42 years) Zaphod (9001 years)
> go run .
{Arthur 42} {Zaphod 9001}
```

2021-05-18 19:03:15
```
 Go programs express error state with error values.

The error type is a built-in interface similar to fmt.Stringer:

type error interface {
    Error() string
}
```
Goではエラーの状態をerrorというインターフェースを実装して表現するみたいです。

```
Functions often return an error value, and calling code should handle errors by testing whether the error equals nil. 
```
関数はよくerrorという値を返すそうです。
関数を呼び出しているコードではerror がnilかどうかを処理するべきだそうです。

2021-05-18 20:00:30
```
Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why? 
```
fmt.Sprint(e)だと再帰的にErrorメソッドが呼ばれてしまいますが、fmt.Sprint(float64(e))だとループを避けることができます。
どうしてでしょうか？

僕の推測だと、Sprint(e)はErrorメソッドを呼び出すけどfloat64(e)はErrorメソッドを呼び出さないからだと思います。

でもどうしてErrorメソッドを呼び出すんでしょうか調べてみます。

2021-05-18 20:19:45
それっぽい説明がありました。

go - Why would a call to fmt.Sprint(e) inside the Error() method result in an infinite loop? - Stack Overflow https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit

Sprint メソッドを実行するときに引数の型がerrorインターフェースを実装していたときにErrorメソッドが実行されてしまうからだそうです。

2021-05-19 15:57:25
```
The io package specifies the io.Reader interface, which represents the read end of a stream of data. 

The io.Reader interface has a Read method:

func (T) Read(b []byte) (n int, err error)
```
io · pkg.go.dev https://pkg.go.dev/io#Reader

2021-05-19 23:53:34
```
 A goroutine is a lightweight thread managed by the Go runtime.

go f(x, y, z)
```
goroutineという軽量スレッドがあるそうです。

2021-05-20 21:39:25
A tour of goの続きをやります。

A Tour of Go https://tour.golang.org/concurrency/1

2021-05-20 21:48:43
```
Channels are a typed conduit through which you can send and receive values with the channel operator, <-. 

ch <- v    // Send v to channel ch.
v := <-ch  // Receive from ch, and
           // assign value to v.
```

チャンネルというオペレータがあるみたいです。

```
 Like maps and slices, channels must be created before use:

ch := make(chan int)
```
mapやsliceのようにチャンネルも使う前に初期化が必要なようです。

```
By default, sends and receives block until the other side is ready. 
```
デフォルトだと送信と受信はお互いの準備が整うまで通信をブロックするみたいです

2021-05-20 22:25:57
```
Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel: 
```
チャンネルはバッファリングされるようです。
make関数の第２引数はチャンネルのバッファの長さみたいです。

```
Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty. 
```
バッファが満タンの時にだけチャンネルの送信処理が実行されて、
バッファがからの時にだけチャンネルの受信処理が実行されるみたいです。

2021-05-20 22:41:22
```
A sender can close a channel to indicate that no more values will be sent. Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression
```
チャンネルに情報を送る送信側はもう値を送ることがないことを示すためにチャンネルを閉じることができるみたいです。

チャンネルからの受信側はチャンネルが閉じられているかどうかを第二引数で確認できるみたいです。

```
v, ok := <-ch

ok is false if there are no more values to receive and the channel is closed. 
```
もう受け取る値がなくそのチャンネルが閉じられているときに変数okがfalseなるみたいです。

```
The loop for i := range c receives values from the channel repeatedly until it is closed. 
```
チャンネルが閉じられるまで続くループをシンプルに書けるみたいです。

```
note: Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop. 
```
チャンネルはfileのようなものではないので常にcloseする必要はないようです。
受信側がチャンネルがcloseするまでループしているときなどに送信側でcloseするみたいです。

2021-05-20 23:13:28
```
The select statement lets a goroutine wait on multiple communication operations. 
```
selectステートメントはgoroutineに複数の通信処理を待機させるみたいです。

```
A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready. 
```
selectはどれか一つのcaseが実行できるようになるまでブロックするみたいです。
もし複数のcaseが準備できているときはランダムに選ぶみたいです。

2021-05-20 23:28:17
```
 The default case in a select is run if no other case is ready.

Use a default case to try a send or receive without blocking: 
```
select文でのdefaultケースではほかのcaseが準備できていないときに実行されるみたいです。

送受信がブロックされないかテストするためにdefaultケースを使ってくれと言っているみたいです。

2021-05-23 05:46:54
A tour of goの続きをします。

2021-05-23 05:47:07
１時間たっても解けなかったので答えを見ました。
Solution to Exercise: Web Crawler https://tour.golang.org/concurrency/10 · GitHub https://gist.github.com/harryhare/6a4979aa7f8b90db6cbc74400d0beb49
