2021-07-05 12:06:18
どうやって読んでいけばいいのかわからなかったので以前に読んだ記事をさんこうにします。

大規模なソースコードを理解する https://zenn.dev/okmttdhr/articles/78af1e87cbd9d0

```
デバッガを挟んだりしながら、いつどんな挙動が起こっているのかを調べる
プログラムを小さく動かすことになれておく
CONTRIBUTING.md などをみてリポジトリの環境構築をすることになれておく
動かす目的を明確にするといい 
```

2021-07-05 12:17:40
```
    GitHubではPRだけwatchすることができる
    意味のあるプログラムの塊をPR単位で見ることができる
    興味があるソフトウェアのコードを、受動的に把握したい時に便利である
    1-2ヶ月位真面目に見ると、PRを出してマージされるまでの流れや、誰が主体となって開発をしているかなどがなんとなくわかる
    ポイントとしては、ファイル名や関数名を中心にみて、処理の詳細は興味があれば、くらいの雰囲気でみることである。これによって、PRのたびにどこになにがあるかざっくり把握することができるし、興味があれば「PRに関連するがそのPRでは差分のない」パッケージやディレクトリ、ファイルや関数をみにいくことができる
    また、member や collaborator などの、コアなメンテナを把握することもできる。これによって、後述の「issueを見る」時に、重要度を判別しやすくなる

```

How to get specific github notifications like pull requests or assigned issues? - Stack Overflow https://stackoverflow.com/questions/14609652/how-to-get-specific-github-notifications-like-pull-requests-or-assigned-issues

2021-07-05 12:21:37
```
    リアクションやコメント数でソートする
        単純にたくさんのリアクションが集まっているissueは、要望が多い機能、根本的な課題、大きめのロードマップやクールな実装の提案などが多い
        そういう中心人物同士の会話を見ることでソフトウェア自体にも興味が出てくる
    ラベルでソートする
        eg. バグ、新規機能、ロードマップ、難易度、コアチームが作成、パッケージ名、アルゴリズム名、ディスカッション用、RFC、etc

```

2021-07-05 12:56:10
issueを眺めても得るものが少なくて飽きてきたので、実際に動かしてみます。

```
OSSでもアプリケーションでも同じ
デバッガを挟んだりしながら、いつどんな挙動が起こっているのかを調べる
プログラムを小さく動かすことになれておく
CONTRIBUTING.md などをみてリポジトリの環境構築をすることになれておく
動かす目的を明確にするといい 
```

2021-07-05 13:16:21
次は小さく動かしてみるに挑戦してみます。
```
    テストには重要な情報が詰まっている
    まずは、テストケースを見ることで、プログラムの仕様を把握できる。結合レベルのものはもちろん、特定のパッケージや関数の挙動も把握できるコードは嬉しい
    次に、プログラムを小さく動かす方法がわかる。テストを書けばアプリケーションを立ち上げなくてもプログラムを動かせるほか、テストのアーキテクチャを理解すると、そのソフトウェア(あるいは一部のパッケージ)を動かすにはどういうランタイムが必要なのかが理解できる
```
